version: "3.7"

services:
  # Load Balancer Nginx
  # Ponto de entrada para todas as requisições, que serão distribuídas para o backend.
  nginx:
    image: nginx:1.27
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "9999:80"
    depends_on:
      - app1
      - app2
    networks:
      - rinha-backend-network
      - rinha-network
    deploy:
      resources:
        limits:
          cpus: "0.2"
          memory: "40MB"

  # Primeira instância do nosso backend em C#.
  app1:
    build:
      context: . # Garante que o Docker saiba onde encontrar seu Dockerfile
    image: rinha-backend-2025-cs:latest # Use uma tag consistente para sua imagem
    hostname: app1
    depends_on:
      - redis # Seu backend ainda depende do Redis
    networks:
      - rinha-backend-network
      - rinha-network
    deploy:
      resources:
        limits:
          cpus: "0.6"
          memory: "150MB"

  # Segunda instância do nosso backend em C#.
  app2:
    build:
      context: . # Garante que o Docker saiba onde encontrar seu Dockerfile
    image: rinha-backend-2025-cs:latest # Use uma tag consistente para sua imagem
    hostname: app2
    depends_on:
      - redis # Seu backend ainda depende do Redis
    networks:
      - rinha-backend-network
      - rinha-network
    deploy:
      resources:
        limits:
          cpus: "0.6"
          memory: "150MB"

  # Serviço Redis para cache e persistência.
  redis:
    image: redis:latest
    hostname: redis
    networks:
      - rinha-backend-network
    deploy:
      resources:
        limits:
          cpus: "0.1"
          memory: "10MB"

networks:
  rinha-backend-network:
    driver: bridge
  rinha-network: # <--- Correção: Agora no mesmo nível de rinha-backend-network
    external: true
